import asyncio
from datetime import datetime, timezone
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from aiogram.types import ReplyKeyboardRemove
import httpx

CRYPTOBOT_API_TOKEN = "414912:AAOxcFiur4XxoxAigHexDyeHGhq3NLT7ArS"
CRYPTOBOT_BASE_URL = "https://pay.crypt.bot/414912:AAOxcFiur4XxoxAigHexDyeHGhq3NLT7ArS"
BOT_TOKEN = "7964452516:AAE6IQxljgPHcQ34jv_rJI3oIvPgQac4C-s"

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN)
)
dp = Dispatcher()

user_languages = {}
valid_promocodes = {"SUNLIGHTFREE"}
used_promocodes = set()
user_daylight = {}
promocode_input_enabled = set()
user_balance = {}
user_pending_invoice = {}



def get_language(user_id: int) -> str:
    return user_languages.get(user_id, "English")

def set_language(user_id: int, lang: str):
    user_languages[user_id] = lang

def get_title_by_daylight(daylight: float) -> str:
    if daylight > 1.0:
        return "High"
    elif daylight > 0.10:
        return "Middle"
    else:
        return "New"

@dp.message(F.text == "/start")
async def cmd_start(message: Message):
    await send_welcome(message)

async def create_crypto_invoice(user_id: int, amount: float, description: str) -> tuple[str, str]:
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {CRYPTOBOT_API_TOKEN}"
    }
    payload = {
        "asset": "USDT",
        "amount": f"{amount:.2f}",
        "description": description,
        "hidden_message": f"Payment for user {user_id}",
        "paid_btn_name": "callback",
        "paid_btn_url": "https://t.me/DDNetHellBot"
    }

    async with httpx.AsyncClient() as client:
        response = await client.post(f"{CRYPTOBOT_BASE_URL}/createInvoice", json=payload, headers=headers)
        response.raise_for_status()
        data = response.json()
        return data["result"]["pay_url"], data["result"]["invoice_id"]



@dp.message(F.text == "/myaccount")
async def cmd_myaccount(message: Message):
    await send_account_info(message)

@dp.message(F.text == "/configs")
async def cmd_configs(message: Message):
    await send_configs_menu(message)

async def send_welcome(message: Message):
    now = datetime.now(timezone.utc)
    print(f"[{now.isoformat()}] /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

    lang = get_language(message.from_user.id)
    text = (
        "*DDNetHell ‚Äî Bot for purchasing DDNet configs*\n\n"
        "üëã Welcome! I'm DDNetHell, your assistant for quick and easy purchase of unique DDNet configs. "
        "Choose and buy custom configs crafted with care to enhance your gaming experience. "
        "Simple, fast, and secure!"
    ) if lang == "English" else (
        "*DDNetHell ‚Äî –ë–æ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ DDNet –∫–æ–Ω—Ñ–∏–≥–æ–≤*\n\n"
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø DDNetHell, —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏ —É–¥–æ–±–Ω–æ–≥–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö DDNet –∫–æ–Ω—Ñ–∏–≥–æ–≤. "
        "–í—ã–±–∏—Ä–∞–π –∏ –ø–æ–∫—É–ø–∞–π –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å –∑–∞–±–æ—Ç–æ–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–≤–æ–µ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –æ–ø—ã—Ç–∞. "
        "–ü—Ä–æ—Å—Ç–æ, –±—ã—Å—Ç—Ä–æ –∏ –Ω–∞–¥–µ–∂–Ω–æ!"
    )

    control_panel_text = "Control Panel" if lang == "English" else "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üë§ Personal account", callback_data="account")
    keyboard.button(text="üë• Links and more", callback_data="links")
    keyboard.button(text=f"‚öô {control_panel_text}", callback_data="control_panel")
    keyboard.adjust(1)

    photo = FSInputFile("Welcome.jpg")
    await message.answer_photo(photo=photo, caption=text, reply_markup=keyboard.as_markup())

async def send_account_info(target: Message | CallbackQuery):
    user = target.from_user
    username = user.username or user.full_name or "Unknown"
    user_id = user.id

    lang = get_language(user_id)
    daylight = user_daylight.get(user_id, 0.0)
    title = get_title_by_daylight(daylight)
    lang_display = "English" if lang == "English" else "–†—É—Å—Å–∫–∏–π"

    text = (
        f"üó£ Hello, {username}! [ID: {user_id}]\n\n"
        f"üë§ *Name:* **{username}**\n"
        f"üëÅ *Title:* **{title}**\n"
        f"‚òÄÔ∏è *Daylight:* _{daylight:.2f}$_\n"
        f"üá∫üá∏/üá∑üá∫ *Language:* _{lang_display}_\n\n"
        f"_Subscription:_ ‚ùå\n\n"
    ) if lang == "English" else (
        f"üó£ –ü—Ä–∏–≤–µ—Ç, {username}! [ID: {user_id}]\n\n"
        f"üë§ *–ò–º—è:* **{username}**\n"
        f"üëÅ *–ó–≤–∞–Ω–∏–µ:* **{title}**\n"
        f"‚òÄÔ∏è *Daylight:* _{daylight:.2f}$_\n"
        f"üá∫üá∏/üá∑üá∫ *–Ø–∑—ã–∫:* _{lang_display}_\n\n"
        f"_–ü–æ–¥–ø–∏—Å–∫–∞:_ ‚ùå\n\n"
    )

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üí∞ Shop" if lang == "English" else "üí∞ –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop")
    keyboard.button(text="‚öô Configs" if lang == "English" else "‚öô –ö–æ–Ω—Ñ–∏–≥–∏", callback_data="configs")
    keyboard.button(text="üè∑ Promocode" if lang == "English" else "üè∑ –ü—Ä–æ–º–æ–∫–æ–¥", callback_data="promocode")
    keyboard.button(text="üõ† Support" if lang == "English" else "üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")
    keyboard.adjust(2, 1, 1)

    photo = FSInputFile("Account.jpg")
    if isinstance(target, Message):
        await target.answer_photo(photo=photo, caption=text, reply_markup=keyboard.as_markup())
    else:
        await target.message.answer_photo(photo=photo, caption=text, reply_markup=keyboard.as_markup())


@dp.callback_query(F.data == "promocode")
async def cb_promocode(callback: CallbackQuery):
    user_id = callback.from_user.id
    lang = get_language(user_id)

    if user_id in used_promocodes:
        text = "üö´ You have already used a promocode!" if lang == "English" else "üö´ –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥!"
        await callback.answer(text, show_alert=True)
        return

    promocode_input_enabled.add(user_id)

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚Üê Back", callback_data="promocode_back")
    keyboard.adjust(1)

    text = (
        "*üè∑ Enter promocode:*\n\n"
        "Send a valid code to get bonuses."
        if lang == "English" else
        "*üè∑ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å—ã."
    )
    await callback.message.answer(text, reply_markup=keyboard.as_markup())
    await callback.answer()

@dp.callback_query(F.data == "account")
async def cb_account(callback: CallbackQuery):
    await send_account_info(callback)
    await callback.answer()

@dp.callback_query(F.data == "links")
async def cb_links(callback: CallbackQuery):
    lang = get_language(callback.from_user.id)
    await callback.answer("üë• Links and more (coming soon)" if lang == "English" else "üë• –°—Å—ã–ª–∫–∏ –∏ –¥—Ä—É–≥–æ–µ (—Å–∫–æ—Ä–æ –±—É–¥–µ—Ç)", show_alert=True)

@dp.callback_query(F.data == "shop")
async def cb_shop(callback: CallbackQuery):
    lang = get_language(callback.from_user.id)

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üíµ $1.00", callback_data="topup_1")
    keyboard.button(text="üíµ $3.00", callback_data="topup_3")
    keyboard.button(text="üíµ $5.00", callback_data="topup_5")
    keyboard.button(text="üíµ $10.00", callback_data="topup_10")
    keyboard.adjust(2)

    text = (
        "üí≥ *–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:*\n–í—ã–±–µ—Ä–∏—Ç–µ, –Ω–∞ —Å–∫–æ–ª—å–∫–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å."
    )

    await callback.message.answer(text, reply_markup=keyboard.as_markup())
    await callback.answer()


@dp.callback_query(F.data.startswith("topup_"))
async def cb_topup(callback: CallbackQuery):
    user_id = callback.from_user.id
    lang = get_language(user_id)
    amount = int(callback.data.split("_")[1])

    pay_url, invoice_id = await create_crypto_invoice(user_id, amount, "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞")
    user_pending_invoice[user_id] = invoice_id  # ‚úÖ —Å–æ—Ö—Ä–∞–Ω—è–µ–º invoice_id

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üü¢ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ CryptoBot", url=pay_url)
    keyboard.button(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="confirm_payment")
    keyboard.adjust(1, 1)

    text = (
        f"üí∞ *–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ ${amount:.2f}*\n\n"
        f"1. –ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ\n"
        f"2. –û–ø–ª–∞—Ç–∏ –≤ CryptoBot\n"
        f"3. –ü–æ—Ç–æ–º –Ω–∞–∂–º–∏ '–Ø –æ–ø–ª–∞—Ç–∏–ª'"
    )

    await callback.message.answer(text, reply_markup=keyboard.as_markup())
    await callback.answer()

@dp.callback_query(F.data == "confirm_payment")
async def cb_confirm_payment(callback: CallbackQuery):
    user_id = callback.from_user.id
    lang = get_language(user_id)

    invoice_id = user_pending_invoice.get(user_id)
    if not invoice_id:
        await callback.message.answer("‚ùå –°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {CRYPTOBOT_API_TOKEN}"
    }

    async with httpx.AsyncClient() as client:
        response = await client.get(f"{CRYPTOBOT_BASE_URL}/getInvoices?invoice_ids={invoice_id}", headers=headers)
        response.raise_for_status()
        data = response.json()

        invoice = data["result"][0]
        status = invoice["status"]
        amount = float(invoice["amount"])

        if status == "paid":
            user_daylight[user_id] = user_daylight.get(user_id, 0.0) + amount
            await callback.message.answer(
                f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {user_daylight[user_id]:.2f} daylight."
            )
        else:
            await callback.message.answer("‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.callback_query(F.data == "support")
async def cb_support(callback: CallbackQuery):
    lang = get_language(callback.from_user.id)
    await callback.answer("üõ† Support (coming soon)" if lang == "English" else "üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞ (—Å–∫–æ—Ä–æ –±—É–¥–µ—Ç)", show_alert=True)

@dp.callback_query(F.data == "configs")
async def send_configs_menu(target: Message | CallbackQuery):
    lang = get_language(target.from_user.id)

    text = (
        "‚öô *Configs:*\nChoose one of the configs below. All are optimized for DDNet and ready to use."
        if lang == "English" else
        "‚öô *Configs:*\n–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥–æ–≤ –Ω–∏–∂–µ. –í—Å–µ –æ–Ω–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è DDNet –∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é."
    )

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="1 Config", callback_data="config_1")
    keyboard.button(text="2 Config", callback_data="config_2")
    keyboard.button(text="3 Config", callback_data="config_3")
    keyboard.button(text="4 Config", callback_data="config_4")
    keyboard.button(text="<-", callback_data="configs_prev")
    keyboard.button(text="->", callback_data="configs_next")
    keyboard.adjust(2, 2, 2)

    photo = FSInputFile("Configs.jpg")

    if isinstance(target, Message):
        await target.answer_photo(photo=photo, caption=text, reply_markup=keyboard.as_markup())
    else:
        await target.message.answer_photo(photo=photo, caption=text, reply_markup=keyboard.as_markup())
        await target.answer()


# üëá –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –ø–µ—Ä–≤–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
async def send_config_1(callback: CallbackQuery):
    text = (
        "‚òÄÔ∏è <b>Kimi no Asa</b> ‚Äì <i>Your morning</i>\n"
        "üí∞ <b>Price</b> ‚Äì <i>0.1$</i> (Pay once, keep forever)\n\n"
        "‚úî <b>Optimized for every DDNet versions</b>\n"
        "‚úî <b>Clean interface & fast binds</b>\n"
        "‚úî <b>No ads, no subscriptions</b>\n\n"
        "<blockquote>Paid version 1.6</blockquote>\n\n"
    )

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚Üí Get now", callback_data="buy_config_1")
    keyboard.button(text="‚Üí About & previews", callback_data="preview_config_1")
    keyboard.button(text="‚Üí How to install", callback_data="install_config_1")
    keyboard.button(text="‚Üê Back", callback_data="back_to_configs")
    keyboard.adjust(1)

    photo = FSInputFile("Config1.jpg")
    await callback.message.answer_photo(
        photo=photo,
        caption=text,
        reply_markup=keyboard.as_markup(),
        parse_mode="HTML"
    )

# üëá –ü—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–µ—Ä–≤–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–∑ –º–µ–Ω—é –∫–æ–Ω—Ñ–∏–≥–æ–≤
@dp.callback_query(F.data == "config_1")
async def cb_config_1(callback: CallbackQuery):
    await callback.message.delete()
    await send_config_1(callback)
    await callback.answer()

# üëá –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞
@dp.callback_query(F.data == "preview_config_1")
async def preview_config_1(callback: CallbackQuery):
    await callback.message.delete()

    text = (
        "<b>üåÖ Kimi no Asa ‚Äî Your morning.</b>\n\n"
        "Kimi no Asa is a handcrafted DDNet config made entirely from scratch.\n"
        "Created by @DDNetHell in just 2 hours ‚Äî no templates, no copy-paste, just pure logic, flow, and soul.\n\n"
        "<b>üîß What‚Äôs inside:</b>\n\n"
        "‚Üí Fully optimized for all DDNet versions\n"
        "‚Üí Clean HUD with no distractions\n"
        "‚Üí Minimal visuals ‚Äî full control\n"
        "‚Üí Works flawlessly with keyboard\n"
        "‚Üí No useless scripts ‚Äî only what you really need\n"
        "‚Üí Lightweight for smooth FPS even on low-end setups\n\n"
        "üåÖ Inspired by Kyoto mornings, anime vibes, and old-school.\n"
        "Every detail was tested and fine-tuned for pure movement and focus.\n\n"
        "<i>‚ÄúThis isn‚Äôt just a config ‚Äî it‚Äôs your new starting point.‚Äù</i>\n\n"
        "<blockquote>"
        "üìÑ Made by: DDNetHell\n"
        "üì¶ Version: 1.6\n"
        "üî® Used programmes: Visual Studio Code; Photoshop; Notebook.\n"
        "üìå Release type: One-time / No updates / No ads / No bullshit"
        "</blockquote>"
    )

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚Üê Back", callback_data="back_to_config_1")
    keyboard.adjust(1)

    photo = FSInputFile("Config1.jpg")
    await callback.message.answer_photo(photo=photo, caption=text, reply_markup=keyboard.as_markup(), parse_mode="HTML")
    await callback.answer()

@dp.callback_query(F.data == "buy_config_1")
async def buy_config_1(callback: CallbackQuery):
    user_id = callback.from_user.id
    lang = get_language(user_id)
    balance = user_daylight.get(user_id, 0.0)  # –ó–ê–ú–ï–ù–ê!
    price = 0.10

    if balance >= price:
        user_daylight[user_id] = balance - price  # –ó–ê–ú–ï–ù–ê!

        text = (
            f"‚úÖ *–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!*\n\n"
            f"_–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏:_ `Kimi no Asa`\n"
            f"_–¶–µ–Ω–∞:_ **${price:.2f}**\n"
            f"_–í–∞—à daylight:_ **{user_daylight[user_id]:.2f}**\n\n"
            f"_–ö–æ–Ω—Ñ–∏–≥ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è._"
        )

        await callback.message.answer(text)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞
        await callback.message.answer_document(FSInputFile("KimiNoAsa.zip"))  # ‚úÖ –ù–µ –∑–∞–±—É–¥—å –ø–æ–ª–æ–∂–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ —Ç—É –∂–µ –ø–∞–ø–∫—É

    else:
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üí≥ Refill balance", callback_data="shop")
        keyboard.button(text="üîó Pay via CryptoBot", url="https://t.me/CryptoBot?start=PAY_KIMINOASA")
        keyboard.adjust(1, 1)

        text = (
            f"‚ùå *–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!*\n\n"
            f"_–¶–µ–Ω–∞:_ **${price:.2f}**\n"
            f"_–í–∞—à daylight:_ **{balance:.2f}**\n\n"
            f"_–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –æ–ø–ª–∞—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ CryptoBot._"
        )
        await callback.message.answer(text, reply_markup=keyboard.as_markup())

    await callback.answer()


# üëá –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –≤ —Å–∞–º –∫–æ–Ω—Ñ–∏–≥
@dp.callback_query(F.data == "back_to_config_1")
async def back_to_config_1(callback: CallbackQuery):
    await callback.message.delete()
    await send_config_1(callback)
    await callback.answer()

# üëá –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –≤ –º–µ–Ω—é –∫–æ–Ω—Ñ–∏–≥–æ–≤
@dp.callback_query(F.data == "back_to_configs")
async def back_to_configs(callback: CallbackQuery):
    await callback.message.delete()
    await send_configs_menu(callback)
    await callback.answer()


# üì¶ –£–ª—É—á—à–µ–Ω–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Kimi no Asa
@dp.callback_query(F.data == "install_config_1")
async def install_config_1(callback: CallbackQuery):
    await callback.message.delete()
    lang = get_language(callback.from_user.id)

    if lang == "English":
        text = (
            "*üß© Installation Guide for Kimi no Asa*\n"
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
            "Welcome to the setup tutorial for the **Kimi no Asa** config.\n"
            "Follow these steps to install it correctly and enjoy the perfect DDNet experience:\n\n"
            "üì• *1.* Download the archive: `KimiNoAsa.rar`\n"
            "üñ• *2.* Press `Win + R` on your keyboard\n"
            "üí¨ *3.* Type `%AppData%` and press Enter\n"
            "üìÇ *4.* Find the folder named `DDNet`\n"
            "üì¶ *5.* Extract and move all files from the archive into that folder\n"
            "üéÆ *6.* Start the game\n"
            "üåê *7.* Join any DDNet server\n"
            "‚å®Ô∏è *8.* Press `F1` to open console\n"
            "‚öôÔ∏è *9.* Type: `exec KimiNoAsa.cfg`\n\n"
            "üí° *Tip:* If you renamed the `.cfg` file, use the name you gave it.\n\n"
            "_Enjoy clean visuals, fast binds, and focused gameplay!_\n"
            "Made with ‚ù§Ô∏è by @DDNetHell"
        )
    else:
        text = (
            "*üß© –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Kimi no Asa*\n"
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–∞–π–¥ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–Ω—Ñ–∏–≥–∞ **Kimi no Asa**.\n"
            "–°–ª–µ–¥—É–π —ç—Ç–∏–º —à–∞–≥–∞–º, —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –∏–¥–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä–æ–π –≤ DDNet:\n\n"
            "üì• *1.* –°–∫–∞—á–∞–π –∞—Ä—Ö–∏–≤: `KimiNoAsa.rar`\n"
            "üñ• *2.* –ù–∞–∂–º–∏ `Win + R`\n"
            "üí¨ *3.* –í–≤–µ–¥–∏ `%AppData%` –∏ –Ω–∞–∂–º–∏ Enter\n"
            "üìÇ *4.* –ù–∞–π–¥–∏ –ø–∞–ø–∫—É `DDNet`\n"
            "üì¶ *5.* –†–∞—Å–ø–∞–∫—É–π –∏ –ø–µ—Ä–µ–º–µ—Å—Ç–∏ –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –∞—Ä—Ö–∏–≤–∞ –≤ —ç—Ç—É –ø–∞–ø–∫—É\n"
            "üéÆ *6.* –ó–∞–ø—É—Å—Ç–∏ –∏–≥—Ä—É\n"
            "üåê *7.* –ó–∞–π–¥–∏ –Ω–∞ –ª—é–±–æ–π —Å–µ—Ä–≤–µ—Ä DDNet\n"
            "‚å®Ô∏è *8.* –ù–∞–∂–º–∏ `F1`, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω—Å–æ–ª—å\n"
            "‚öôÔ∏è *9.* –ù–∞–ø–∏—à–∏: `exec KimiNoAsa.cfg`\n\n"
            "üí° *–°–æ–≤–µ—Ç:* –ï—Å–ª–∏ —Ç—ã –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª `.cfg` —Ñ–∞–π–ª ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π —Å–≤–æ—ë –∏–º—è.\n\n"
            "_–ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è —á–∏—Å—Ç—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º, –±—ã—Å—Ç—Ä—ã–º–∏ –±–∏–Ω–¥–∞–º–∏ –∏ —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –¥–≤–∏–∂–µ–Ω–∏–∏!_\n"
            "–°–¥–µ–ª–∞–Ω–æ —Å ‚ù§Ô∏è –æ—Ç @DDNetHell"
        )

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚Üê Back", callback_data="back_to_config_1_from_install")
    keyboard.adjust(1)

    await callback.message.answer(text, reply_markup=keyboard.as_markup())

# ‚¨Ö –ù–∞–∑–∞–¥ –∏–∑ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞ –≤ —Å–∞–º –∫–æ–Ω—Ñ–∏–≥
@dp.callback_query(F.data == "back_to_config_1_from_install")
async def back_to_config_1_from_install(callback: CallbackQuery):
    await callback.message.delete()
    await send_config_1(callback)
    await callback.answer()



# üìñ /guides ‚Äî —É–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—â–∏–π –≥–∞–π–¥ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–Ω—Ñ–∏–≥–æ–≤
@dp.message(F.text == "/guide")
async def cmd_guides(message: Message):
    lang = get_language(message.from_user.id)

    if lang == "English":
        text = (
            "*üìñ How to install any DDNet Config:*\n"
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
            "Use this step-by-step guide to install any config (including paid ones).\n\n"
            "üì• *1.* Download the config archive (.rar or .zip)\n"
            "üñ• *2.* Press `Win + R` on your keyboard\n"
            "üí¨ *3.* Type `%AppData%` and press Enter\n"
            "üìÇ *4.* Open the `DDNet` folder (create it if it doesn't exist)\n"
            "üì¶ *5.* Unpack the archive and move all files into the `DDNet` folder\n"
            "üéÆ *6.* Launch DDNet\n"
            "üåê *7.* Join any server\n"
            "‚å®Ô∏è *8.* Press `F1` to open the console\n"
            "‚öôÔ∏è *9.* Type: `exec your_config_name.cfg`\n\n"
            "üí° Replace `your_config_name` with the actual filename.\n\n"
            "_Enjoy clean gameplay, optimized binds, and smooth movement!_\n"
            "Made with ‚ù§Ô∏è by @DDNetHell"
        )
    else:
        text = (
            "*üìñ –ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª—é–±–æ–π DDNet –∫–æ–Ω—Ñ–∏–≥:*\n"
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
            "–°–ª–µ–¥—É–π —ç—Ç–æ–º—É –ø–æ—à–∞–≥–æ–≤–æ–º—É –≥–∞–π–¥—É, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª—é–±–æ–π –∫–æ–Ω—Ñ–∏–≥ (–≤–∫–ª—é—á–∞—è –ø–ª–∞—Ç–Ω—ã–µ).\n\n"
            "üì• *1.* –°–∫–∞—á–∞–π –∞—Ä—Ö–∏–≤ –∫–æ–Ω—Ñ–∏–≥–∞ (.rar –∏–ª–∏ .zip)\n"
            "üñ• *2.* –ù–∞–∂–º–∏ `Win + R` –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ\n"
            "üí¨ *3.* –í–≤–µ–¥–∏ `%AppData%` –∏ –Ω–∞–∂–º–∏ Enter\n"
            "üìÇ *4.* –û—Ç–∫—Ä–æ–π –ø–∞–ø–∫—É `DDNet` (—Å–æ–∑–¥–∞–π –µ—ë, –µ—Å–ª–∏ –Ω–µ—Ç)\n"
            "üì¶ *5.* –†–∞—Å–ø–∞–∫—É–π –∞—Ä—Ö–∏–≤ –∏ –ø–µ—Ä–µ–º–µ—Å—Ç–∏ –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É `DDNet`\n"
            "üéÆ *6.* –ó–∞–ø—É—Å—Ç–∏ DDNet\n"
            "üåê *7.* –ó–∞–π–¥–∏ –Ω–∞ –ª—é–±–æ–π —Å–µ—Ä–≤–µ—Ä\n"
            "‚å®Ô∏è *8.* –ù–∞–∂–º–∏ `F1`, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω—Å–æ–ª—å\n"
            "‚öôÔ∏è *9.* –ù–∞–ø–∏—à–∏: `exec –∏–º—è_–∫–æ–Ω—Ñ–∏–≥–∞.cfg`\n\n"
            "üí° –ó–∞–º–µ–Ω–∏ `–∏–º—è_–∫–æ–Ω—Ñ–∏–≥–∞` –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è —Ñ–∞–π–ª–∞.\n\n"
            "_–ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è —á–∏—Å—Ç—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º, —É–¥–æ–±–Ω—ã–º–∏ –±–∏–Ω–¥–∞–º–∏ –∏ –ø–ª–∞–≤–Ω—ã–º –¥–≤–∏–∂–µ–Ω–∏–µ–º!_\n"
            "–°–¥–µ–ª–∞–Ω–æ —Å ‚ù§Ô∏è –æ—Ç @DDNetHell"
        )

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚Üê Back", callback_data="back_to_account_from_guides")
    keyboard.adjust(1)

    await message.answer(text, reply_markup=keyboard.as_markup())

# ‚¨Ö –ù–∞–∑–∞–¥ –∏–∑ /guides –≤ –ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
@dp.callback_query(F.data == "back_to_account_from_guides")
async def back_to_account_from_guides(callback: CallbackQuery):
    await callback.message.delete()
    await send_account_info(callback)
    await callback.answer()

@dp.callback_query(F.data.in_({"config_2", "config_3", "config_4"}))
async def cb_config_placeholder(callback: CallbackQuery):
    await callback.answer("‚è≥ Coming soon...", show_alert=True)

@dp.callback_query(F.data == "promocode")
async def cb_promocode(callback: CallbackQuery):
    user_id = callback.from_user.id
    lang = get_language(user_id)

    if user_id in used_promocodes:
        text = "üö´ You have already used a promocode!" if lang == "English" else "üö´ –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥!"
        await callback.answer(text, show_alert=True)
        return

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚Üê Back", callback_data="promocode_back")
    keyboard.adjust(1)

    text = (
        "*üè∑ Enter promocode:*\n\n"
        "Send a valid code to get bonuses."
        if lang == "English" else
        "*üè∑ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å—ã."
    )
    await callback.message.answer(text, reply_markup=keyboard.as_markup())
    await callback.answer()


@dp.callback_query(F.data == "promocode_back")
async def cb_promocode_back(callback: CallbackQuery):
    user_id = callback.from_user.id
    promocode_input_enabled.discard(user_id)
    await callback.message.delete()
    await callback.answer()

@dp.message()
async def handle_promocode_input(message: Message):
    user_id = message.from_user.id
    lang = get_language(user_id)
    code = message.text.strip()

    if user_id not in promocode_input_enabled:
        return

    if code in valid_promocodes:
        if user_id in used_promocodes:
            text = (
                "üö´ *Oops! You've already used a promocode.*\n\n"
                "_Only one gift per user ‚Äî make it count!_ üéÅ"
                if lang == "English" else
                "üö´ *–£–ø—Å! –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥.*\n\n"
                "_–û–¥–∏–Ω –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å —É–º–æ–º!_ üéÅ"
            )
        else:
            used_promocodes.add(user_id)
            user_daylight[user_id] = user_daylight.get(user_id, 0.0) + 1.0
            text = (
                "‚úÖ *Promocode successfully activated!* üéâ\n\n"
                "_You just gained_ **+1.0** _daylight ‚òÄÔ∏è_"
                if lang == "English" else
                "‚úÖ *–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!* üéâ\n\n"
                "_–í—ã –ø–æ–ª—É—á–∏–ª–∏_ **+1.0** _daylight ‚òÄÔ∏è_"
            )
        promocode_input_enabled.discard(user_id)
    else:
        text = (
            "‚ùå *Invalid promocode entered.*\n\n"
            "_Double-check the code and try again, or press_ `‚Üê Back` _to return._"
            if lang == "English" else
            "‚ùå *–í–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥.*\n\n"
            "_–ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞, –ª–∏–±–æ –Ω–∞–∂–º–∏_ `‚Üê –ù–∞–∑–∞–¥` _–¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞._"
        )

    await message.answer(text, reply_markup=ReplyKeyboardRemove())


@dp.callback_query(F.data == "control_panel")
async def cb_control_panel(callback: CallbackQuery):
    lang = get_language(callback.from_user.id)
    caption = "*Control Panel*\n\nChoose your language / –í—ã–±–µ—Ä–∏ —è–∑—ã–∫:" if lang == "English" else "*–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è*\n\nChoose your language / –í—ã–±–µ—Ä–∏ —è–∑—ã–∫:"
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üá∫üá∏ English" if lang == "English" else "üá∫üá∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π", callback_data="lang_English")
    keyboard.button(text="üá∑üá∫ Russian" if lang == "English" else "üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_Russian")
    keyboard.adjust(1)
    photo = FSInputFile("ControlPanel.jpg")
    await callback.message.answer_photo(photo=photo, caption=caption, reply_markup=keyboard.as_markup())
    await callback.answer()

@dp.callback_query(F.data.startswith("lang_"))
async def cb_lang_change(callback: CallbackQuery):
    chosen_lang = callback.data.split("_")[1]
    set_language(callback.from_user.id, "Russian" if chosen_lang == "Russian" else "English")
    await callback.message.delete()
    lang = get_language(callback.from_user.id)
    await callback.message.answer("Language changed to English ‚úÖ" if lang == "English" else "–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π ‚úÖ")
    await callback.answer()

async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
